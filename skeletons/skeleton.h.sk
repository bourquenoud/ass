#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

/*  */
//!! token_enum !!//

const char const * ASS_token_names[] = //!! token_names !!//

/* Lexer */
typedef uint32_t ASS_state_t;
ASS_state_t ASS_lexer_state = 0;
bool ASS_lexer_valid = false;
bool ASS_lexer_processed = false;
int ASS_lexer_output = -1;
int ASS_lexer_token;

/* Location tracking */
//TODO: make a bison-style location system
int ASS_column = 0;
int ASS_line = 1;

// Called when
void ASS_lexer_exit_point()
{
    ASS_lexer_state = 0;
    ASS_lexer_processed = false;
    ASS_lexer_valid = false;
    printf("Extracted token %s\n", ASS_token_names[ASS_lexer_output]);
}

// Called when encountered an invalid token
void ASS_lexer_invalid_token()
{
    fprintf(stderr, "Lexical error at %i:%i\n", ASS_line, ASS_column);
    exit(EXIT_FAILURE);
}

// State machine
void ASS_lexer()
{
    ASS_lexer_processed = true;
    //!! lexer_switch !!//
}

int main(int argc, char const *argv[])
{

    FILE *fd;

    if (argc == 1)
        fd = stdin;
    else
        fd = fopen(argv[1], "r");

    while (true)
    {
        // Run one step of the state machine

        if ((ASS_lexer_token = fgetc(fd)) == EOF)
            break;

        // Mark the token as unprocessed
        ASS_lexer_processed = false;

        // Keep track of the position
        if (ASS_lexer_token == '\n')
        {
            ASS_column = -1;
            ASS_line++;
        }
        else if (ASS_lexer_token == '\r') //Because windows, I guess...
        {
            ASS_column = -1;
        }
        
        ASS_column++;

        // Run the lexer machine until the token has been processed
        while (!ASS_lexer_processed)
            ASS_lexer();
    }

    printf("File parsed\n");

    return 0;
}
/*!! notice !!*/

/* C assembler generator
 * Copyright (C) 2022 Mathieu Bourquenoud
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

/***************** enums, defines and consts *****************/
enum
{
    ASS_OUT_HEX,
    ASS_OUT_COE,
};

enum
{
    ASS_U_NONE = 0,
    ASS_U_DATA = 1,
};

/*!! parameters !!*/

/********************* struct and unions *********************/
/*!! data_union !!*/

typedef struct
{
    int first_line;
    int first_column;
    int last_line;
    int last_column;
} ASS_location_t;

typedef struct
{
    int type;
    ASS_data_t (*action)(void);
} ASS_action_t;

typedef struct
{
    char *name;
    uint64_t value;
} ASS_symbol_t;

typedef struct
{
    bool absolute;
    char *symbol_name;
    int index;
    int bit_offset;
    int bit_width;
} ASS_ref_t;

typedef struct
{
    int address;
    uint64_t data;
} ASS_opcode_t; // TODO: more meaningful name

typedef struct
{
    uint64_t start;
    uint64_t stop;
} address_range_t;

/********************* general globals *********************/
char *ASS_text = NULL;
int ASS_current_address = 0;
bool ASS_option_verbose = false;

/********************* log system *********************/
#define ASS_INFO_COLOUR 94
#define ASS_WARN_COLOUR 93
#define ASS_ERRO_COLOUR 91
#define ASS_MAX_LINE_LENGTH 1024

void ASS_log_error(const char *, ...);
void ASS_log_warning(const char *, ...);
void ASS_log_info(const char *, ...);
void ASS_show_line(int);

ASS_location_t ASS_loc = {1, 0, 1, 0};
int ASS_col_pos = 0;
int ASS_line_pos = 1;
char ASS_line[ASS_MAX_LINE_LENGTH];
int ASS_line_ptr = 0;
int ASS_info_count = 0;
int ASS_warning_count = 0;
int ASS_error_count = 0;

/********************* tokens *********************/
// Special token
#define ASS_EOF -1

/*!! token_enum !!*/

/*!! token_names !!*/

/********************* stacks *********************/
#define ASS_DEFAULT_STACK_DEPTH 1024

// Lexer
int *ASS_lexer_stack;
int ASS_lexer_stack_size = 0;
int ASS_lexer_stack_ptr = 0;
void ASS_lexer_stack_push(int);
int ASS_lexer_stack_pop(void);

// Parser
ASS_data_t *ASS_parser_stack;
int ASS_parser_stack_size = 0;
int ASS_parser_stack_ptr = 0;
void ASS_parser_stack_push(ASS_data_t);
ASS_data_t ASS_parser_stack_pop(void);

// Symbol
ASS_symbol_t *ASS_symbol_stack;
int ASS_symbol_stack_size = 0;
int ASS_symbol_stack_ptr = 0;
void ASS_symbol_stack_push(ASS_symbol_t);
ASS_symbol_t ASS_symbol_stack_pop(void);

// Binary
// TODO: rename to ASS_instruction_stack
ASS_opcode_t *ASS_binary_stack;
int ASS_binary_stack_size = 0;
int ASS_binary_stack_ptr = 0;
void ASS_binary_stack_push(ASS_opcode_t);
ASS_opcode_t ASS_binary_stack_pop(void);

// Reference
ASS_ref_t *ASS_ref_stack;
int ASS_ref_stack_size = 0;
int ASS_ref_stack_ptr = 0;
void ASS_ref_stack_push(ASS_ref_t);
ASS_ref_t ASS_ref_stack_pop(void);

/********************* lexer *********************/

/*!! lexer_actions !!*/

/*!! lexer_action_list !!*/

int ASS_lexer_state = 0;
bool ASS_lexer_valid = false;
bool ASS_lexer_processed = false;
ASS_token_t ASS_lexer_output = -1;
int ASS_lexer_token;
bool ASS_lexer_output_ready = false;

/********************* parser *********************/

/*!! parser_actions !!*/

/*!! parser_action_list !!*/

int ASS_parser_state = 0;
bool ASS_parser_valid = false;
bool ASS_parser_processed = false;
int ASS_parser_output = -1;
ASS_token_t ASS_parser_token;
bool ASS_parser_output_ready = false;

/***********************************************************************************************************/
/*                                                   STACKS                                                */
/***********************************************************************************************************/

// Lexer
void ASS_lexer_stack_push(int val)
{
    // Resize the stack if necessary
    if (ASS_lexer_stack_size == 0)
    {
        ASS_lexer_stack = malloc(sizeof(ASS_token_t) * ASS_DEFAULT_STACK_DEPTH);
        ASS_lexer_stack_size = ASS_DEFAULT_STACK_DEPTH;
    }
    else if (ASS_lexer_stack_size <= ASS_lexer_stack_ptr)
    {
        ASS_lexer_stack = malloc(ASS_lexer_stack_size * 2);
        ASS_lexer_stack_size *= 2;
    }

    ASS_lexer_stack[ASS_lexer_stack_ptr++] = val;
}

int ASS_lexer_stack_pop(void)
{
    return ASS_lexer_stack[--ASS_lexer_stack_ptr];
}

// Parser
void ASS_parser_stack_push(ASS_data_t val)
{
    // Resize the stack if necessary
    if (ASS_parser_stack_size == 0)
    {
        ASS_parser_stack = malloc(sizeof(ASS_data_t) * ASS_DEFAULT_STACK_DEPTH);
        ASS_parser_stack_size = ASS_DEFAULT_STACK_DEPTH;
    }
    else if (ASS_parser_stack_size <= ASS_parser_stack_ptr)
    {
        ASS_parser_stack = malloc(ASS_parser_stack_size * 2);
        ASS_parser_stack_size *= 2;
    }

    ASS_parser_stack[ASS_parser_stack_ptr++] = val;
}

ASS_data_t ASS_parser_stack_pop(void)
{
    return ASS_parser_stack[--ASS_parser_stack_ptr];
}

// Symbol
void ASS_symbol_stack_push(ASS_symbol_t val)
{
    // Resize the stack if necessary
    if (ASS_symbol_stack_size == 0)
    {
        ASS_symbol_stack = malloc(sizeof(ASS_symbol_t) * ASS_DEFAULT_STACK_DEPTH);
        ASS_symbol_stack_size = ASS_DEFAULT_STACK_DEPTH;
    }
    else if (ASS_symbol_stack_size <= ASS_symbol_stack_ptr)
    {
        ASS_symbol_stack = malloc(ASS_symbol_stack_size * 2);
        ASS_symbol_stack_size *= 2;
    }

    ASS_symbol_stack[ASS_symbol_stack_ptr++] = val;
}

ASS_symbol_t ASS_symbol_stack_pop(void)
{
    return ASS_symbol_stack[--ASS_symbol_stack_ptr];
}

// binary
void ASS_binary_stack_push(ASS_opcode_t val)
{
    // Resize the stack if necessary
    if (ASS_binary_stack_size == 0)
    {
        ASS_binary_stack = malloc(sizeof(ASS_opcode_t) * ASS_DEFAULT_STACK_DEPTH);
        ASS_binary_stack_size = ASS_DEFAULT_STACK_DEPTH;
    }
    else if (ASS_binary_stack_size <= ASS_binary_stack_ptr)
    {
        ASS_binary_stack = malloc(ASS_binary_stack_size * 2);
        ASS_binary_stack_size *= 2;
    }

    ASS_binary_stack[ASS_binary_stack_ptr++] = val;
}

ASS_opcode_t ASS_binary_stack_pop(void)
{
    return ASS_binary_stack[--ASS_binary_stack_ptr];
}

// ref
void ASS_ref_stack_push(ASS_ref_t val)
{
    // Resize the stack if necessary
    if (ASS_ref_stack_size == 0)
    {
        ASS_ref_stack = malloc(sizeof(ASS_ref_t) * ASS_DEFAULT_STACK_DEPTH);
        ASS_ref_stack_size = ASS_DEFAULT_STACK_DEPTH;
    }
    else if (ASS_ref_stack_size <= ASS_ref_stack_ptr)
    {
        ASS_ref_stack = malloc(ASS_ref_stack_size * 2);
        ASS_ref_stack_size *= 2;
    }

    ASS_ref_stack[ASS_ref_stack_ptr++] = val;
}

ASS_ref_t ASS_ref_stack_pop(void)
{
    return ASS_ref_stack[--ASS_ref_stack_ptr];
}

/***********************************************************************************************************/
/*                                                   LEXER                                                 */
/***********************************************************************************************************/

// Called when the lexer exit from a valid end state
void ASS_lexer_exit_point()
{
    // Push the NULL character to terminate the string
    ASS_lexer_stack_push('\0');

    // Allocate the memory
    if (ASS_text != NULL)
        free(ASS_text);
    ASS_text = malloc(ASS_lexer_stack_ptr + 1);

    // Copy the string to free the stack
    for (size_t i = 0; i < ASS_lexer_stack_ptr; i++)
    {
        ASS_text[i] = ASS_lexer_stack[i];
    }

    ASS_lexer_state = 0;
    ASS_lexer_processed = false;
    ASS_lexer_valid = false;
    ASS_lexer_output_ready = true;
}

// Called when encountered an invalid token
void ASS_lexer_invalid_token()
{
    ASS_loc = (ASS_location_t){ASS_line_pos, ASS_col_pos, ASS_line_pos, ASS_col_pos};
    if (ASS_lexer_token >= ' ' && ASS_lexer_token <= '~') // Pritable tokens
        ASS_log_error("Lexical error, unexpected '%c'", ASS_lexer_token);
    else if (ASS_lexer_token == ASS_EOF)
        ASS_log_error("Lexical error, unexpected EOF");
    else
        ASS_log_error("Lexical error, unexpected %#x", ASS_lexer_token);
    exit(EXIT_FAILURE);
}

void ASS_lexer_action()
{
    ASS_data_t data = ASS_lexer_action_list[ASS_lexer_output].action();
    if (ASS_lexer_action_list[ASS_lexer_output].type != ASS_U_NONE)
        ASS_parser_stack_push(data);
    ASS_lexer_stack_ptr = 0;
}

// State machine
void ASS_lexer()
{
    ASS_lexer_processed = true;

    /*!! lexer_switch !!*/

    if (ASS_lexer_processed)
        ASS_lexer_stack_push(ASS_lexer_token);
}

/***********************************************************************************************************/
/*                                                   PARSER                                                */
/***********************************************************************************************************/

// Called when the lexer exit from a valid end state
void ASS_parser_exit_point()
{
    ASS_parser_state = 0;
    ASS_parser_processed = false;
    ASS_parser_valid = false;
    ASS_parser_output_ready = true;
}

// Called when encountered an invalid token
void ASS_parser_invalid_token()
{
    ASS_log_error("Syntax error, unexpected %s", ASS_token_names[ASS_parser_token]);
    exit(EXIT_FAILURE);
}

void ASS_parser_action()
{
    ASS_parser_action_list[ASS_parser_output].action();
    ASS_parser_stack_ptr = 0;
}

void ASS_parser()
{
    ASS_parser_processed = true;

    /*!! parser_switch !!*/
}

/***********************************************************************************************************/
/*                                                    MAIN                                                 */
/***********************************************************************************************************/

int ASS_address_range_cmp(const void *a, const void *b)
{
    return (*(address_range_t *)a).start - (*(address_range_t *)b).start;
}

int ASS_opcode_cmp(const void *a, const void *b)
{
    return (*(ASS_opcode_t *)a).address - (*(ASS_opcode_t *)b).address;
}

int main(int argc, char const *argv[])
{
    FILE *fd;
    char const *output_file = NULL;
    char const *input_file = NULL;

    // Output in hex format by default
    int output_format = ASS_OUT_HEX;
    bool format_set = false;

    // Parse the arguments
    // NOTE: Handcrafted for portability.
    // TODO: use the library optparse instead (https://github.com/skeeto/optparse, compatible license)
    for (size_t i = 1; i < argc; i++)
    {
        int len = strlen(argv[i]);
        if (len >= 2 && argv[i][0] == '-') // Is an option
        {
            // Parse all options
            for (size_t j = 1; j < len; j++)
            {
                switch (argv[i][j])
                {
                case 'o': // Output file
                    if (++i >= argc || (strlen(argv[i]) >= 2 && argv[i][0] == '-'))
                    {
                        printf("ERROR : option 'o' requires a parameter.\n");
                        exit(EXIT_FAILURE);
                    }
                    output_file = argv[i];
                    break;
                case 'x': // Output in hex format
                    if (format_set)
                    {
                        printf("ERROR : Multiple format option\n");
                        exit(EXIT_FAILURE);
                    }
                    output_format = ASS_OUT_HEX;
                    format_set = true;
                    break;
                case 'c': // Output in coe
                    if (format_set)
                    {
                        printf("ERROR : Multiple format option\n");
                        exit(EXIT_FAILURE);
                    }
                    output_format = ASS_OUT_COE;
                    format_set = true;
                    break;
                case 'v': // Enable verbose mode
                    ASS_option_verbose = true;
                    break;
                default:
                    break;
                }
            }
        }
        else // Is not an option, then it's an input file
        {
            // TODO: support multiple files
            if (input_file == NULL)
                input_file = argv[i];
        }
    }

    if (input_file == NULL || strcmp(input_file, "-") == 0)
        fd = stdin;
    else
        fd = fopen(input_file, "r");

    // load the first line
    ASS_line_ptr = 0;
    if (fgets(ASS_line, ASS_MAX_LINE_LENGTH, fd) == NULL)
    {
        ASS_log_info("Empty file.");
        exit(EXIT_SUCCESS);
    }

    // TODO : make it not need multiple newlines at the end
    int last_newline = 0;
    bool run = true;
    while (run)
    {

        if (last_newline)
        {
            if (last_newline == 1)
            {
                run = false;
                ASS_lexer_token = ASS_EOF;
            }
            else
            {
                last_newline--;
                ASS_lexer_token = '\n';
            }
        }
        else
        {
            // Read the next character
            ASS_lexer_token = ASS_line[ASS_line_ptr++];

            // Load the next line
            if (ASS_lexer_token == '\0')
            {
                ASS_line_ptr = 0;

                // Stop when no more data is available
                if (fgets(ASS_line, ASS_MAX_LINE_LENGTH, fd) == NULL)
                {
                    // HACK: Push a bunch of linefeed character before feeding the EOF and then closing
                    ASS_lexer_token = '\n';
                    last_newline = 3;
                }
                else
                    continue;
            }
        }

        // Mark the token as unprocessed
        ASS_lexer_processed = false;

        // Run the lexer machine until the token has been processed
        while (!ASS_lexer_processed)
        {
            ASS_lexer_output_ready = false;
            ASS_lexer();

            // Run the parser if the lexer has matched a token
            if (ASS_lexer_output_ready)
            {
                // Save the token's end position
                ASS_loc.last_line = ASS_line_pos - 1;
                ASS_loc.last_column = ASS_col_pos - 1;

                // Process any non-whitespace token
                if (ASS_lexer_output != ASS_T_WHITESPACE)
                {
                    ASS_parser_processed = false;
                    ASS_parser_token = ASS_lexer_output;

                    while (!ASS_parser_processed)
                    {
                        ASS_parser_output_ready = false;
                        ASS_parser();

                        if (ASS_parser_output_ready)
                            ASS_parser_action();
                    }
                }

                // Execute the token action only after the rule action has been executed
                ASS_lexer_action();

                // The end of the last token is the beginning of the next
                ASS_loc.first_line = ASS_line_pos;
                ASS_loc.first_column = ASS_col_pos;
            }
        }

        // Keep track of the position
        if (ASS_lexer_token == '\n')
        {
            ASS_col_pos = -1;
            ASS_line_pos++;
        }
        else if (ASS_lexer_token == '\r') // Because windows, I guess...
        {
            ASS_col_pos = -1;
        }
        ASS_col_pos++;
    }

    fclose(fd);

    // Resolve references
    for (size_t i = 0; i < ASS_ref_stack_ptr; i++)
    {
        ASS_ref_t *ref = ASS_ref_stack + i;

        // Search in the symbol table
        uint64_t address = 0;
        bool found = false;
        for (size_t j = 0; j < ASS_symbol_stack_ptr; j++)
        {
            if (strcmp(ref->symbol_name, ASS_symbol_stack[j].name) == 0)
            {
                address = ASS_symbol_stack[j].value;
                found = true;
                break;
            }
        }

        // Update the opcode value
        if (!found)
        {
            ASS_log_error("Symbol '%s' not found", ref->symbol_name);
        }
        else
        {
            uint64_t mask;
            ASS_opcode_t *opcode = ASS_binary_stack + ref->index;
            mask = (0xFFFFFFFFFFFFFFFFLLU << (ref->bit_width + ref->bit_offset));
            mask |= ~(0xFFFFFFFFFFFFFFFFLLU << (ref->bit_offset));
            opcode->data &= mask;

            // Compute the relative position if necessarry
            if (ref->absolute)
                opcode->data |= (~mask & (address << (ref->bit_offset)));
            else
                opcode->data |= (~mask & (((int64_t)address - (int64_t)opcode->address) << (ref->bit_offset)));
        }
    }

    // Exit if no data
    if (ASS_binary_stack_ptr == 0)
    {
        ASS_log_info("No instructions. Exiting");
        exit(EXIT_SUCCESS);
    }

    // Generate address ranges
    size_t address_ranges_count = 1;
    uint64_t last_address;

    address_range_t *address_range_array = malloc(sizeof(address_range_t));
    last_address = ASS_binary_stack[0].address;
    address_range_array[0].start = last_address;

    for (size_t i = 1; i < ASS_binary_stack_ptr; i++)
    {
        // If we get an address jump then we count it as a different address range
        if (last_address + 1 != ASS_binary_stack[i].address)
        {
            address_range_array[address_ranges_count - 1].stop = last_address;
            address_range_array = realloc(address_range_array, sizeof(address_range_t) * (address_ranges_count + 1)); // TODO: realloc less frequently
            address_range_array[address_ranges_count].start = ASS_binary_stack[i].address;
            address_ranges_count++;
        }
        last_address = ASS_binary_stack[i].address;
    }
    address_range_array[address_ranges_count - 1].stop = last_address;

    // Check for address collisions
    for (size_t i = 0; i < address_ranges_count - 1; i++)
    {
        for (size_t j = i + 1; j < address_ranges_count; j++)
        {
            // If range overlap
            if ((address_range_array[i].start <= address_range_array[j].stop) && (address_range_array[i].stop >= address_range_array[j].start))
            {
                ASS_log_error("Colliding address ranges. Address from 0x%X to 0x%X are overlapping. Exiting",
                              (address_range_array[i].start > address_range_array[j].start) ? address_range_array[i].start : address_range_array[j].start,
                              (address_range_array[i].stop < address_range_array[j].stop) ? address_range_array[i].stop : address_range_array[j].stop);
                exit(EXIT_FAILURE);
            }
        }
    }

    // Sort the instructions by address
    qsort(ASS_binary_stack, ASS_binary_stack_ptr, sizeof(*ASS_binary_stack), ASS_opcode_cmp);

    // Sort address ranges
    // TODO: could be removed by sorting the instructions before generating ranges
    qsort(address_range_array, address_ranges_count, sizeof(*address_range_array), ASS_address_range_cmp);

    if (output_file == NULL || strcmp(output_file, "-") == 0)
        fd = stdout;
    else
        fd = fopen(output_file, "w");

    if (output_format == ASS_OUT_HEX)
    {
        for (size_t i = 0; i < ASS_binary_stack_ptr; i++)
        {
            uint8_t msb, lsb;
            int chksum;
            msb = (ASS_binary_stack[i].data >> 8) & (0xFF);
            lsb = (ASS_binary_stack[i].data) & (0xFF);
            chksum = 2 + ((ASS_binary_stack[i].address * 2) & 0xFF) + (((ASS_binary_stack[i].address * 2) >> 8) & 0xFF) + lsb + msb;
            fprintf(fd, ":02%04X00%02X%02X%02X\n", ASS_binary_stack[i].address * 2, lsb, msb, (-chksum) & 0xFF);
        }
        fprintf(fd, ":00000001FF\n");
    }
    else if (output_format == ASS_OUT_COE)
    {
        if ((ASS_P_address_stop - ASS_P_address_start) * ASS_P_memory_width / 8 > 1024LLU * 1024LLU * 1024LLU)
            ASS_log_warning("Very large memory is being written as serialised data (>1Gio)");

        fprintf(fd, "memory_initialization_radix=16;\n");
        fprintf(fd, "memory_initialization_vector=");

        int instruction_index = 0;
        for (uint64_t i = ASS_P_address_start; i <= ASS_P_address_stop; i++)
        {
            if(i!=0)
                fputc(',', fd);
            if (ASS_binary_stack[instruction_index].address == i && instruction_index < ASS_binary_stack_ptr)
            {
                fprintf(fd, "\n%04X", ASS_binary_stack[instruction_index].data);
                instruction_index++;
            }
            else
            {
                fprintf(fd, "\n0000", ASS_binary_stack[instruction_index].data);
            }
        }
        fputc(';', fd);
    }

    fclose(fd);

    return 0;
}

/***********************************************************************************************************/
/*                                                LOG SYSTEM                                               */
/***********************************************************************************************************/

// TODO: Upgrade to the new version

void ASS_log_info(const char *format, ...)
{
    ASS_info_count++;

    // Show info only in verbose mode
    if (!ASS_option_verbose)
        return;

    va_list args;
    va_start(args, format);
    fprintf(stdout, "\033[%im", ASS_INFO_COLOUR);
    fprintf(stderr, "INFO line %i : ", ASS_loc.first_line);
    vfprintf(stdout, format, args);
    fputs("\033[0m\n", stdout);
    va_end(args);

    ASS_show_line(ASS_INFO_COLOUR);
    fputc('\n', stderr);
}

void ASS_log_warning(const char *format, ...)
{
    ASS_warning_count++;

    va_list args;
    va_start(args, format);
    fprintf(stderr, "\033[%im", ASS_WARN_COLOUR);
    fprintf(stderr, "WARNING line %i : ", ASS_loc.first_line);
    vfprintf(stderr, format, args);
    fputs("\033[0m\n", stderr);
    va_end(args);

    ASS_show_line(ASS_WARN_COLOUR);
    fputc('\n', stderr);
}

// Write a message before exiting
void ASS_log_error(const char *format, ...)
{
    ASS_error_count++;

    va_list args;
    va_start(args, format);
    fprintf(stderr, "\033[%im", ASS_ERRO_COLOUR);
    fprintf(stderr, "ERROR line %i : ", ASS_loc.first_line);
    vfprintf(stderr, format, args);
    fputs("\033[0m\n\n", stderr);
    va_end(args);

    ASS_show_line(ASS_ERRO_COLOUR);
    fputc('\n', stderr);

    // exit(EXIT_FAILURE);
}

void ASS_show_line(int colourCode)
{
    int i;

    fprintf(stderr, "%6i |", ASS_loc.first_line);

    for (i = 0; i < ASS_loc.first_column && ASS_line[i]; i++)
    {
        fputc(ASS_line[i], stderr);
    }
    fprintf(stderr, "\033[%im", colourCode);
    for (i = ASS_loc.first_column; i < ASS_loc.last_column + 1 && ASS_line[i] && ASS_line[i] != '\n' && ASS_line[i] != '\r'; i++)
    {
        fputc(ASS_line[i], stderr);
    }
    fputs("\033[0m", stderr);
    while (ASS_line[i] != '\n' && ASS_line[i] != '\r' && ASS_line[i] != '\0')
    {
        fputc(ASS_line[i++], stderr);
    }

    fputs("\n       |", stderr);
    for (i = 0; i < ASS_loc.first_column; i++)
    {
        fputc(' ', stderr);
    }
    fprintf(stderr, "\033[%im", colourCode);
    for (i = ASS_loc.first_column; i < ASS_loc.last_column + 1; i++)
    {
        if (i == ASS_loc.first_column)
            fputc('^', stderr);
        else
            fputc('~', stderr);
    }
    fputs("\033[0m\n", stderr);
}